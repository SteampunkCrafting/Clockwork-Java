package spc.clockwork.graphics.mesh;

import spc.clockwork.collections.GameWorld;
import spc.clockwork.core.GameAsset;
import spc.clockwork.util.math.geometry_3d.Triangle3D;
import spc.clockwork.util.math.vector.Vector3f;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A {@link Mesh} extension that allows to keep its vertices as a set of
 *   {@link spc.clockwork.util.math.geometry_3d.Triangle3D} that this mesh has sent to the GPU.
 */
public class TriangleSetMesh extends Mesh {

    /* ATTRIBUTES
    /*--------------------*/

    /** An error message, when the triangle set creation fails */
    private static final String ERROR_CANNOT_CREATE_TRIANGLE_SET
            = "Error: unable to create a triangle set from the given mesh. \n" +
            "Maybe this is because the points of some of the triangles are too close to each other";

    /** A set of triangles of the mesh */
    private final Set<Triangle3D> triangleSet;
    /*--------------------*/



    /* PRIVATE METHODS
    /*--------------------*/

    /**
     * Creates, builds and returns the set of triangles based on positions and indices array given
     * @param positions the positions array of the mesh
     * @param indices the index array of the mesh
     * @return the set of triangles that belong to this mesh
     */
    private static Set<Triangle3D> createTriangleSet(float[] positions, int[] indices) {
        ArrayList<Vector3f> vertices = new ArrayList<>();
        for(int i = 0; i < positions.length; i += 3) {
            vertices.add(
                    new Vector3f(
                            positions[i],
                            positions[i+1],
                            positions[i+2]
                    )
            );
        }


        LinkedHashSet<Triangle3D> set = new LinkedHashSet<>();
        for(int i = 0; i < indices.length; i += 3) {
            set.add(
                    new Triangle3D(
                            vertices.get(indices[i]),
                            vertices.get(indices[i+1]),
                            vertices.get(indices[i+2])
                    )
            );
        }
        return set;
    }
    /*--------------------*/



    /* PUBLIC METHODS
    /*--------------------*/

    /**
     * Gets an iterator over the mesh triangles
     * @return an iterator over the elements of the mesh triangle set
     */
    public Iterator<Triangle3D> triangleIterator() {
        return this.triangleSet.iterator();
    }
    /*--------------------*/



    /* CLASS CONSTRUCTORS
    /*--------------------*/

    /**
     * A constructor of Mesh, which does not require file names
     * @param positions a dumped array of positions
     * @param textureCoordinates a dumped array of texture coordinates
     * @param normals a dumped array of normals
     * @param indices an array of indices
     * @param description description of the {@link GameAsset}
     */
    public TriangleSetMesh(GameWorld gameWorld,
                           float[] positions,
                           float[] textureCoordinates,
                           float[] normals,
                           int[] indices,
                           String description) throws Exception {
        this(gameWorld, positions, textureCoordinates, normals, indices, null, null, description);
    }

    /**
     * A standard constructor of Mesh, used by model decoders to create meshes from files, pre-generated by 3d editors
     * @param gameWorld the GameWorld of this
     * @param positions a dumped array of positions
     * @param textureCoordinates a dumped array of texture coordinates
     * @param normals a dumped array of normals
     * @param indices an array of indices
     * @param classPath the path to the root class
     * @param filePath the path to the file, which stores the encoded copy of this model
     * @param description description of the {@link GameAsset}
     */
    public TriangleSetMesh(GameWorld gameWorld,
                           float[] positions,
                           float[] textureCoordinates,
                           float[] normals,
                           int[] indices,
                           Class classPath,
                           String filePath,
                           String description) throws Exception {
        super(gameWorld, positions, textureCoordinates, normals, indices, classPath, filePath, description);
        try {
            this.triangleSet = createTriangleSet(positions, indices);
        } catch(Exception e) {
            this.onTerminate();
            throw new Exception(ERROR_CANNOT_CREATE_TRIANGLE_SET);
        }
    }
    /*--------------------*/
}
